#include <ncurses.h>
#include <stdio.h>
#include "game.h"
#include "interface.h"
#include "scores.h"
#include "ai.h"

//#include<stdbool>
extern bool gameOver;
extern char currentPlayer;

int main() {
  int mode = 0; //1=PVSP SI 2=PVSAI

  // alegerea modului de joc la început
  printf("Select game mode:\n");
  printf("1. Player vs Player\n");
  printf("2. Player vs AI\n");
  printf("Enter choice: ");
  scanf("%d", &mode);

  initInterface();   // Initializeaza ncurses
  loadScores();      // Încarcă scorurile din fișier

  int running = 1;
  while (running) {
    initGame();        // InitializeazA tabla de joc
    gameOver = false;

    // bucla principală pentru un meci
    while (!gameOver) { // Cat timp jocul nu s a terminat
      clear();
      drawGameScreen();         // Deseneaza tabla
      int ch = getch();         // Citeste o tastă
      handleInput(ch, mode);    // trimite modul de joc si muta caracterul

      char winner = checkWinner();   // Verifica dacă cineva a castigat
      if (winner != ' ') { // Daca cineva a win
        clear();
        drawGameScreen();

        if (winner == 'X' || winner == 'O') {
          mvprintw(8, 0, "Jucatorul %c a castigat!", winner);
        }
	else {
          mvprintw(8, 0, "Egalitate!");
        }

        refresh();
        updateScore(winner == ' ' ? 'D' : winner); // update scor; D pt remiză
        saveScores();
        mvprintw(10, 0, "Apasa orice tasta pentru a continua...");
        getch();  // Asteapta apasarea unei taste
        break;
      }

      // verificare remiză (dacă nu mai sunt celule libere)
      int filled = 1;
      for (int i = 0; i < 3 && filled; i++) {
        for (int j = 0; j < 3; j++) {
          if (board[i][j] == ' ') {
            filled = 0;
            break;
          }
        }
      }
      if (filled) {
        clear();
        drawGameScreen();
        mvprintw(8, 0, "Egalitate!");
        refresh();
        updateScore('D');
        saveScores();
        mvprintw(10, 0, "Apasa orice tasta pentru a continua...");
        getch();
        break;
      }
    }

    // întrebăm dacă vrei să joci din nou
    clear();
    mvprintw(5, 0, "Vrei sa joci din nou? (y/n): ");
    refresh();
    int answer = getch();
    if (answer != 'y' && answer != 'Y') {
      running = 0;
    }
  }

  endInterface();    // Închide ncurses
  return 0;
}
